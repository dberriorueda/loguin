{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nexport var ServicioLocal = {\n  obtenerCarrosDisponibles: function () {\n    var _obtenerCarrosDisponibles = _asyncToGenerator(function* () {\n      try {\n        var carrosGuardados = yield AsyncStorage.getItem('RegistrosGuardados');\n        var carros = JSON.parse(carrosGuardados) || [];\n        return carros.filter(function (carro) {\n          return carro.state === 'Disponible';\n        });\n      } catch (error) {\n        console.log(\"Error al obtener carros disponibles: \", error.m);\n      }\n    });\n    function obtenerCarrosDisponibles() {\n      return _obtenerCarrosDisponibles.apply(this, arguments);\n    }\n    return obtenerCarrosDisponibles;\n  }(),\n  actualizarEstadoCarro: function () {\n    var _actualizarEstadoCarro = _asyncToGenerator(function* (numeroPlaca, nuevoEstado) {\n      console.log(`Estado del carro con placa ${numeroPlaca} actualizado a \"${nuevoEstado}\" localmente.`);\n    });\n    function actualizarEstadoCarro(_x, _x2) {\n      return _actualizarEstadoCarro.apply(this, arguments);\n    }\n    return actualizarEstadoCarro;\n  }()\n};","map":{"version":3,"names":["AsyncStorage","ServicioLocal","obtenerCarrosDisponibles","_obtenerCarrosDisponibles","_asyncToGenerator","carrosGuardados","getItem","carros","JSON","parse","filter","carro","state","error","console","log","m","apply","arguments","actualizarEstadoCarro","_actualizarEstadoCarro","numeroPlaca","nuevoEstado","_x","_x2"],"sources":["C:/Users/ThinkPad/Desktop/loguin_ReactNative/componentes/ServicioLocal.js"],"sourcesContent":["import AsyncStorage from \"@react-native-async-storage/async-storage\";\r\n\r\nexport const ServicioLocal = {\r\n    obtenerCarrosDisponibles: async () => {\r\n        try {\r\n            const carrosGuardados = await AsyncStorage.getItem('RegistrosGuardados')\r\n            const carros = JSON.parse(carrosGuardados) || []\r\n            return carros.filter(carro => carro.state === 'Disponible')\r\n        } catch (error) {\r\n            console.log(\"Error al obtener carros disponibles: \",error.m)\r\n        }\r\n    },\r\n\r\n    // Simulación: actualiza el estado de un carro localmente\r\n    actualizarEstadoCarro: async (numeroPlaca, nuevoEstado) => {\r\n        // Reemplaza esto con la lógica real de tu aplicación\r\n        console.log(`Estado del carro con placa ${numeroPlaca} actualizado a \"${nuevoEstado}\" localmente.`);\r\n    },\r\n};\r\n"],"mappings":";AAAA,OAAOA,YAAY,MAAM,2CAA2C;AAEpE,OAAO,IAAMC,aAAa,GAAG;EACzBC,wBAAwB;IAAA,IAAAC,yBAAA,GAAAC,iBAAA,CAAE,aAAY;MAClC,IAAI;QACA,IAAMC,eAAe,SAASL,YAAY,CAACM,OAAO,CAAC,oBAAoB,CAAC;QACxE,IAAMC,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACJ,eAAe,CAAC,IAAI,EAAE;QAChD,OAAOE,MAAM,CAACG,MAAM,CAAC,UAAAC,KAAK;UAAA,OAAIA,KAAK,CAACC,KAAK,KAAK,YAAY;QAAA,EAAC;MAC/D,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAACF,KAAK,CAACG,CAAC,CAAC;MAChE;IACJ,CAAC;IAAA,SAAAd,yBAAA;MAAA,OAAAC,yBAAA,CAAAc,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAAhB,wBAAA;EAAA;EAGDiB,qBAAqB;IAAA,IAAAC,sBAAA,GAAAhB,iBAAA,CAAE,WAAOiB,WAAW,EAAEC,WAAW,EAAK;MAEvDR,OAAO,CAACC,GAAG,CAAE,8BAA6BM,WAAY,mBAAkBC,WAAY,eAAc,CAAC;IACvG,CAAC;IAAA,SAAAH,sBAAAI,EAAA,EAAAC,GAAA;MAAA,OAAAJ,sBAAA,CAAAH,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAAC,qBAAA;EAAA;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}